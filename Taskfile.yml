version: "3"

dotenv: [".env"]

tasks:
  run:
    desc: Run python program. It will also start up the database.
    deps: [database-up]
    cmd: |
      if [ $SERVER == "flask" ]; then
        flask --app main run  --host $SERVER_HOST --port $SERVER_PORT
      elif [ $SERVER == "fastapi" ]; then
        fastapi dev main.py --host $SERVER_HOST --port $SERVER_PORT
      fi

  container-run:
    desc: Run application in the docker or podman container. It will also start up the database.
    deps: [database-up, generate-requirements]
    dir: "{{.USER_WORKING_DIR}}/containers"
    aliases: [crun]
    cmd: bash -c "$RUNNER-compose -f service.yml up -d --no-deps --build"

  container-stop:
    desc: Stop docker or podman container with running application.
    dir: "{{.USER_WORKING_DIR}}/containers"
    aliases: [cstop]
    cmd: bash -c "$RUNNER-compose -f service.yml down"

  database-up:
    desc: Create the database container throw docker or podman.
    dir: "{{.USER_WORKING_DIR}}/containers"
    aliases: [db]
    cmds:
      - bash -c "$RUNNER-compose -f database.yml up -d"
      - task: migrate

  database-down:
    desc: Drop the database container throw docker or podman.
    dir: "{{.USER_WORKING_DIR}}/containers"
    aliases: [dbd]
    cmd: bash -c "$RUNNER-compose -f database.yml down"

  migrate:
    desc: Run alembic migrations engine
    aliases: [m, mg]
    cmd: alembic upgrade head

  lint:
    desc: Run ruff linter
    cmd: ruff check

  format:
    desc: Auto formatting python code with ruff
    aliases: [f, fmt]
    cmd: ruff format

  test:
    desc: Run all tests
    cmd: pytest

  generate-requirements:
    desc: Generate requirements.txt file for Docker containers
    aliases: [req]
    cmds:
      - pip freeze > requirements.txt
      - sed -i -e 's/Flask/Flask[async]/g' requirements.txt
